#include <iostream>
using namespace std;


void minspantree(int G[][7],int visit[],int u,int n)
{
	int i,j,min,l1,l2,weight=0,count=0;
	visit[u]=1;count=1;
	while(count!=n){
		min=100;
		for(i=0;i<n;i++){
			if(visit[i]){
				for(j=0;j<n;j++){
					if(G[i][j]&&!visit[j]&&G[i][j]<min){
					//	cout<<"i="<<i<<"j="<<j<<endl;
						min=G[i][j];l1=i;l2=j;
					}
				}
			}
		}
		weight+=min;
		cout<<l1+1<<"->"<<l2+1<<endl;count++;
		visit[l2]=1;G[l1][l2]=0;
	}cout<<"weight="<<weight<<endl;	
}
int main()
{
/*	bool G[][5]={{0,1,1,1,0},
				{1,0,1,0,1},
				{1,1,0,1,0},
				{1,0,1,0,1},
				{0,1,0,1,0},
				};*/
	int G[][7]={{0,2,4,1,0,0,0},
				{2,0,0,3,10,0,0},
				{4,0,0,2,0,5,0},
				{1,3,2,0,7,8,4},
				{0,10,0,7,0,0,6},
				{0,0,5,8,0,0,1},
				{0,0,0,4,6,1,0},
				};
/*	bool G[][12]={{0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,1,0,0,0,0,1,0,0,0,0},
				{1,1,0,1,0,1,1,0,1,0,0,0},
				{1,0,1,0,1,0,1,0,0,1,1,0},
				{0,0,0,1,0,0,0,0,0,1,0,0},
				{0,0,1,0,0,0,0,0,1,0,0,0},
				{0,0,1,1,0,0,0,0,1,1,0,0},
				{0,1,0,0,0,0,0,0,1,0,0,0},
				{0,0,1,0,0,1,1,1,0,1,0,1},
				{0,0,0,1,1,0,1,0,1,0,1,1},
				{0,0,0,1,0,0,0,0,0,1,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0},
				};*/		
				
	int i,n=7,v,visit[7]={0,0,0,0,0,0,0};
	cout<<"Min spanning tree:\n";
	minspantree(G,visit,0,n);
	
	
}
